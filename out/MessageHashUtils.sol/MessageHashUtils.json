{"abi":[],"bytecode":{"object":"0x6055604b600b8282823980515f1a607314603f577f4e487b71000000000000000000000000000000000000000000000000000000005f525f60045260245ffd5b305f52607381538281f3fe730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122070d7cc584f61d3b204535995286b24c47804c8f5a0318f4044e4ba18cb7cb8bc64736f6c634300081c0033","sourceMap":"521:3181:35:-:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;","linkReferences":{}},"deployedBytecode":{"object":"0x730000000000000000000000000000000000000000301460806040525f5ffdfea264697066735822122070d7cc584f61d3b204535995286b24c47804c8f5a0318f4044e4ba18cb7cb8bc64736f6c634300081c0033","sourceMap":"521:3181:35:-:0;;;;;;;;","linkReferences":{}},"methodIdentifiers":{},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.28+commit.7893614a\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"details\":\"Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing. The library provides methods for generating a hash of a message that conforms to the https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712] specifications.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":\"MessageHashUtils\"},\"evmVersion\":\"cancun\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":@prb/math/=lib/v2-core/node_modules/@prb/math/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\",\":sablier/=lib/sablier/\",\":solady/=lib/v2-core/node_modules/solady/\",\":solarray/=lib/v2-core/node_modules/solarray/\",\":v2-core/=lib/v2-core/src/\"]},\"sources\":{\"lib/openzeppelin-contracts/contracts/utils/Panic.sol\":{\"keccak256\":\"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a\",\"dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG\"]},\"lib/openzeppelin-contracts/contracts/utils/Strings.sol\":{\"keccak256\":\"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251\",\"dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d\"]},\"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol\":{\"keccak256\":\"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e\",\"dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs\"]},\"lib/openzeppelin-contracts/contracts/utils/math/Math.sol\":{\"keccak256\":\"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d\",\"dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol\":{\"keccak256\":\"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8\",\"dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy\"]},\"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol\":{\"keccak256\":\"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03\",\"dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.28+commit.7893614a"},"language":"Solidity","output":{"abi":[],"devdoc":{"kind":"dev","methods":{},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@prb/math/=lib/v2-core/node_modules/@prb/math/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/","sablier/=lib/sablier/","solady/=lib/v2-core/node_modules/solady/","solarray/=lib/v2-core/node_modules/solarray/","v2-core/=lib/v2-core/src/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":"MessageHashUtils"},"evmVersion":"cancun","libraries":{}},"sources":{"lib/openzeppelin-contracts/contracts/utils/Panic.sol":{"keccak256":"0xf7fe324703a64fc51702311dc51562d5cb1497734f074e4f483bfb6717572d7a","urls":["bzz-raw://c6a5ff4f9fd8649b7ee20800b7fa387d3465bd77cf20c2d1068cd5c98e1ed57a","dweb:/ipfs/QmVSaVJf9FXFhdYEYeCEfjMVHrxDh5qL4CGkxdMWpQCrqG"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/Strings.sol":{"keccak256":"0x44f87e91783e88415bde66f1a63f6c7f0076f2d511548820407d5c95643ac56c","urls":["bzz-raw://13a51bc2b23827744dcf5bad10c69e72528cf015a6fe48c93632cdb2c0eb1251","dweb:/ipfs/QmZwPA47Yqgje1qtkdEFEja8ntTahMStYzKf5q3JRnaR7d"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol":{"keccak256":"0x4515543bc4c78561f6bea83ecfdfc3dead55bd59858287d682045b11de1ae575","urls":["bzz-raw://60601f91440125727244fffd2ba84da7caafecaae0fd887c7ccfec678e02b61e","dweb:/ipfs/QmZnKPBtVDiQS9Dp8gZ4sa3ZeTrWVfqF7yuUd6Y8hwm1Rs"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/Math.sol":{"keccak256":"0xa00be322d7db5786750ce0ac7e2f5b633ac30a5ed5fa1ced1e74acfc19acecea","urls":["bzz-raw://6c84e822f87cbdc4082533b626667b6928715bb2b1e8e7eb96954cebb9e38c8d","dweb:/ipfs/QmZmy9dgxLTerBAQDuuHqbL6EpgRxddqgv5KmwpXYVbKz1"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SafeCast.sol":{"keccak256":"0x195533c86d0ef72bcc06456a4f66a9b941f38eb403739b00f21fd7c1abd1ae54","urls":["bzz-raw://b1d578337048cad08c1c03041cca5978eff5428aa130c781b271ad9e5566e1f8","dweb:/ipfs/QmPFKL2r9CBsMwmUqqdcFPfHZB2qcs9g1HDrPxzWSxomvy"],"license":"MIT"},"lib/openzeppelin-contracts/contracts/utils/math/SignedMath.sol":{"keccak256":"0xb1970fac7b64e6c09611e6691791e848d5e3fe410fa5899e7df2e0afd77a99e3","urls":["bzz-raw://db5fbb3dddd8b7047465b62575d96231ba8a2774d37fb4737fbf23340fabbb03","dweb:/ipfs/QmVUSvooZKEdEdap619tcJjTLcAuH6QBdZqAzWwnAXZAWJ"],"license":"MIT"}},"version":1},"ast":{"absolutePath":"lib/openzeppelin-contracts/contracts/utils/cryptography/MessageHashUtils.sol","id":44034,"exportedSymbols":{"MessageHashUtils":[44033],"Strings":[42498]},"nodeType":"SourceUnit","src":"123:3580:35","nodes":[{"id":43961,"nodeType":"PragmaDirective","src":"123:24:35","nodes":[],"literals":["solidity","^","0.8",".20"]},{"id":43963,"nodeType":"ImportDirective","src":"149:39:35","nodes":[],"absolutePath":"lib/openzeppelin-contracts/contracts/utils/Strings.sol","file":"../Strings.sol","nameLocation":"-1:-1:-1","scope":44034,"sourceUnit":42499,"symbolAliases":[{"foreign":{"id":43962,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42498,"src":"157:7:35","typeDescriptions":{}},"nameLocation":"-1:-1:-1"}],"unitAlias":""},{"id":44033,"nodeType":"ContractDefinition","src":"521:3181:35","nodes":[{"id":43974,"nodeType":"FunctionDefinition","src":"1222:433:35","nodes":[],"body":{"id":43973,"nodeType":"Block","src":"1314:341:35","nodes":[],"statements":[{"AST":{"nativeSrc":"1349:300:35","nodeType":"YulBlock","src":"1349:300:35","statements":[{"expression":{"arguments":[{"kind":"number","nativeSrc":"1370:4:35","nodeType":"YulLiteral","src":"1370:4:35","type":"","value":"0x00"},{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a3332","kind":"string","nativeSrc":"1376:34:35","nodeType":"YulLiteral","src":"1376:34:35","type":"","value":"\u0019Ethereum Signed Message:\n32"}],"functionName":{"name":"mstore","nativeSrc":"1363:6:35","nodeType":"YulIdentifier","src":"1363:6:35"},"nativeSrc":"1363:48:35","nodeType":"YulFunctionCall","src":"1363:48:35"},"nativeSrc":"1363:48:35","nodeType":"YulExpressionStatement","src":"1363:48:35"},{"expression":{"arguments":[{"kind":"number","nativeSrc":"1472:4:35","nodeType":"YulLiteral","src":"1472:4:35","type":"","value":"0x1c"},{"name":"messageHash","nativeSrc":"1478:11:35","nodeType":"YulIdentifier","src":"1478:11:35"}],"functionName":{"name":"mstore","nativeSrc":"1465:6:35","nodeType":"YulIdentifier","src":"1465:6:35"},"nativeSrc":"1465:25:35","nodeType":"YulFunctionCall","src":"1465:25:35"},"nativeSrc":"1465:25:35","nodeType":"YulExpressionStatement","src":"1465:25:35"},{"nativeSrc":"1544:31:35","nodeType":"YulAssignment","src":"1544:31:35","value":{"arguments":[{"kind":"number","nativeSrc":"1564:4:35","nodeType":"YulLiteral","src":"1564:4:35","type":"","value":"0x00"},{"kind":"number","nativeSrc":"1570:4:35","nodeType":"YulLiteral","src":"1570:4:35","type":"","value":"0x3c"}],"functionName":{"name":"keccak256","nativeSrc":"1554:9:35","nodeType":"YulIdentifier","src":"1554:9:35"},"nativeSrc":"1554:21:35","nodeType":"YulFunctionCall","src":"1554:21:35"},"variableNames":[{"name":"digest","nativeSrc":"1544:6:35","nodeType":"YulIdentifier","src":"1544:6:35"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":43970,"isOffset":false,"isSlot":false,"src":"1544:6:35","valueSize":1},{"declaration":43967,"isOffset":false,"isSlot":false,"src":"1478:11:35","valueSize":1}],"flags":["memory-safe"],"id":43972,"nodeType":"InlineAssembly","src":"1324:325:35"}]},"documentation":{"id":43965,"nodeType":"StructuredDocumentation","src":"552:665:35","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing a bytes32 `messageHash` with\n `\"\\x19Ethereum Signed Message:\\n32\"` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\n keccak256, although any bytes32 value can be safely used because the final digest will\n be re-hashed.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"1231:22:35","parameters":{"id":43968,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43967,"mutability":"mutable","name":"messageHash","nameLocation":"1262:11:35","nodeType":"VariableDeclaration","scope":43974,"src":"1254:19:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":43966,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1254:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1253:21:35"},"returnParameters":{"id":43971,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43970,"mutability":"mutable","name":"digest","nameLocation":"1306:6:35","nodeType":"VariableDeclaration","scope":43974,"src":"1298:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":43969,"name":"bytes32","nodeType":"ElementaryTypeName","src":"1298:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"1297:16:35"},"scope":44033,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":44000,"nodeType":"FunctionDefinition","src":"2121:229:35","nodes":[],"body":{"id":43999,"nodeType":"Block","src":"2207:143:35","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"19457468657265756d205369676e6564204d6573736167653a0a","id":43986,"isConstant":false,"isLValue":false,"isPure":true,"kind":"string","lValueRequested":false,"nodeType":"Literal","src":"2259:32:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},"value":"\u0019Ethereum Signed Message:\n"},{"arguments":[{"arguments":[{"expression":{"id":43991,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43977,"src":"2316:7:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},"id":43992,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2324:6:35","memberName":"length","nodeType":"MemberAccess","src":"2316:14:35","typeDescriptions":{"typeIdentifier":"t_uint256","typeString":"uint256"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_uint256","typeString":"uint256"}],"expression":{"id":43989,"name":"Strings","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":42498,"src":"2299:7:35","typeDescriptions":{"typeIdentifier":"t_type$_t_contract$_Strings_$42498_$","typeString":"type(library Strings)"}},"id":43990,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2307:8:35","memberName":"toString","nodeType":"MemberAccess","referencedDeclaration":41376,"src":"2299:16:35","typeDescriptions":{"typeIdentifier":"t_function_internal_pure$_t_uint256_$returns$_t_string_memory_ptr_$","typeString":"function (uint256) pure returns (string memory)"}},"id":43993,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2299:32:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_string_memory_ptr","typeString":"string memory"}],"id":43988,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2293:5:35","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":43987,"name":"bytes","nodeType":"ElementaryTypeName","src":"2293:5:35","typeDescriptions":{}}},"id":43994,"isConstant":false,"isLValue":false,"isPure":false,"kind":"typeConversion","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2293:39:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}},{"id":43995,"name":"message","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":43977,"src":"2334:7:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_9af2d9c228f6cfddaa6d1e5b94e0bce4ab16bd9a472a2b7fbfd74ebff4c720b4","typeString":"literal_string hex\"19457468657265756d205369676e6564204d6573736167653a0a\""},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":43984,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"nodeType":"ElementaryTypeNameExpression","src":"2246:5:35","typeDescriptions":{"typeIdentifier":"t_type$_t_bytes_storage_ptr_$","typeString":"type(bytes storage pointer)"},"typeName":{"id":43983,"name":"bytes","nodeType":"ElementaryTypeName","src":"2246:5:35","typeDescriptions":{}}},"id":43985,"isConstant":false,"isLValue":false,"isPure":false,"lValueRequested":false,"memberLocation":"2252:6:35","memberName":"concat","nodeType":"MemberAccess","src":"2246:12:35","typeDescriptions":{"typeIdentifier":"t_function_bytesconcat_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":43996,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2246:96:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":43982,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2236:9:35","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":43997,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2236:107:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":43981,"id":43998,"nodeType":"Return","src":"2217:126:35"}]},"documentation":{"id":43975,"nodeType":"StructuredDocumentation","src":"1661:455:35","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x45` (`personal_sign` messages).\n The digest is calculated by prefixing an arbitrary `message` with\n `\"\\x19Ethereum Signed Message:\\n\" + len(message)` and hashing the result. It corresponds with the\n hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toEthSignedMessageHash","nameLocation":"2130:22:35","parameters":{"id":43978,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43977,"mutability":"mutable","name":"message","nameLocation":"2166:7:35","nodeType":"VariableDeclaration","scope":44000,"src":"2153:20:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":43976,"name":"bytes","nodeType":"ElementaryTypeName","src":"2153:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2152:22:35"},"returnParameters":{"id":43981,"nodeType":"ParameterList","parameters":[{"constant":false,"id":43980,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44000,"src":"2198:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":43979,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2198:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2197:9:35"},"scope":44033,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":44020,"nodeType":"FunctionDefinition","src":"2693:191:35","nodes":[],"body":{"id":44019,"nodeType":"Block","src":"2804:80:35","nodes":[],"statements":[{"expression":{"arguments":[{"arguments":[{"hexValue":"1900","id":44013,"isConstant":false,"isLValue":false,"isPure":true,"kind":"hexString","lValueRequested":false,"nodeType":"Literal","src":"2848:10:35","typeDescriptions":{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},"value":"\u0019\u0000"},{"id":44014,"name":"validator","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44003,"src":"2860:9:35","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},{"id":44015,"name":"data","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":44005,"src":"2871:4:35","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_stringliteral_73fd5d154550a4a103564cb191928cd38898034de1b952dc21b290898b4b697a","typeString":"literal_string hex\"1900\""},{"typeIdentifier":"t_address","typeString":"address"},{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"expression":{"id":44011,"name":"abi","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-1,"src":"2831:3:35","typeDescriptions":{"typeIdentifier":"t_magic_abi","typeString":"abi"}},"id":44012,"isConstant":false,"isLValue":false,"isPure":true,"lValueRequested":false,"memberLocation":"2835:12:35","memberName":"encodePacked","nodeType":"MemberAccess","src":"2831:16:35","typeDescriptions":{"typeIdentifier":"t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$","typeString":"function () pure returns (bytes memory)"}},"id":44016,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2831:45:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}}],"expression":{"argumentTypes":[{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes memory"}],"id":44010,"name":"keccak256","nodeType":"Identifier","overloadedDeclarations":[],"referencedDeclaration":-8,"src":"2821:9:35","typeDescriptions":{"typeIdentifier":"t_function_keccak256_pure$_t_bytes_memory_ptr_$returns$_t_bytes32_$","typeString":"function (bytes memory) pure returns (bytes32)"}},"id":44017,"isConstant":false,"isLValue":false,"isPure":false,"kind":"functionCall","lValueRequested":false,"nameLocations":[],"names":[],"nodeType":"FunctionCall","src":"2821:56:35","tryCall":false,"typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"functionReturnParameters":44009,"id":44018,"nodeType":"Return","src":"2814:63:35"}]},"documentation":{"id":44001,"nodeType":"StructuredDocumentation","src":"2356:332:35","text":" @dev Returns the keccak256 digest of an ERC-191 signed data with version\n `0x00` (data with intended validator).\n The digest is calculated by prefixing an arbitrary `data` with `\"\\x19\\x00\"` and the intended\n `validator` address. Then hashing the result.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toDataWithIntendedValidatorHash","nameLocation":"2702:31:35","parameters":{"id":44006,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44003,"mutability":"mutable","name":"validator","nameLocation":"2742:9:35","nodeType":"VariableDeclaration","scope":44020,"src":"2734:17:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"},"typeName":{"id":44002,"name":"address","nodeType":"ElementaryTypeName","src":"2734:7:35","stateMutability":"nonpayable","typeDescriptions":{"typeIdentifier":"t_address","typeString":"address"}},"visibility":"internal"},{"constant":false,"id":44005,"mutability":"mutable","name":"data","nameLocation":"2766:4:35","nodeType":"VariableDeclaration","scope":44020,"src":"2753:17:35","stateVariable":false,"storageLocation":"memory","typeDescriptions":{"typeIdentifier":"t_bytes_memory_ptr","typeString":"bytes"},"typeName":{"id":44004,"name":"bytes","nodeType":"ElementaryTypeName","src":"2753:5:35","typeDescriptions":{"typeIdentifier":"t_bytes_storage_ptr","typeString":"bytes"}},"visibility":"internal"}],"src":"2733:38:35"},"returnParameters":{"id":44009,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44008,"mutability":"mutable","name":"","nameLocation":"-1:-1:-1","nodeType":"VariableDeclaration","scope":44020,"src":"2795:7:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44007,"name":"bytes32","nodeType":"ElementaryTypeName","src":"2795:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"2794:9:35"},"scope":44033,"stateMutability":"pure","virtual":false,"visibility":"internal"},{"id":44032,"nodeType":"FunctionDefinition","src":"3326:374:35","nodes":[],"body":{"id":44031,"nodeType":"Block","src":"3435:265:35","nodes":[],"statements":[{"AST":{"nativeSrc":"3470:224:35","nodeType":"YulBlock","src":"3470:224:35","statements":[{"nativeSrc":"3484:22:35","nodeType":"YulVariableDeclaration","src":"3484:22:35","value":{"arguments":[{"kind":"number","nativeSrc":"3501:4:35","nodeType":"YulLiteral","src":"3501:4:35","type":"","value":"0x40"}],"functionName":{"name":"mload","nativeSrc":"3495:5:35","nodeType":"YulIdentifier","src":"3495:5:35"},"nativeSrc":"3495:11:35","nodeType":"YulFunctionCall","src":"3495:11:35"},"variables":[{"name":"ptr","nativeSrc":"3488:3:35","nodeType":"YulTypedName","src":"3488:3:35","type":""}]},{"expression":{"arguments":[{"name":"ptr","nativeSrc":"3526:3:35","nodeType":"YulIdentifier","src":"3526:3:35"},{"hexValue":"1901","kind":"string","nativeSrc":"3531:10:35","nodeType":"YulLiteral","src":"3531:10:35","type":"","value":"\u0019\u0001"}],"functionName":{"name":"mstore","nativeSrc":"3519:6:35","nodeType":"YulIdentifier","src":"3519:6:35"},"nativeSrc":"3519:23:35","nodeType":"YulFunctionCall","src":"3519:23:35"},"nativeSrc":"3519:23:35","nodeType":"YulExpressionStatement","src":"3519:23:35"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3566:3:35","nodeType":"YulIdentifier","src":"3566:3:35"},{"kind":"number","nativeSrc":"3571:4:35","nodeType":"YulLiteral","src":"3571:4:35","type":"","value":"0x02"}],"functionName":{"name":"add","nativeSrc":"3562:3:35","nodeType":"YulIdentifier","src":"3562:3:35"},"nativeSrc":"3562:14:35","nodeType":"YulFunctionCall","src":"3562:14:35"},{"name":"domainSeparator","nativeSrc":"3578:15:35","nodeType":"YulIdentifier","src":"3578:15:35"}],"functionName":{"name":"mstore","nativeSrc":"3555:6:35","nodeType":"YulIdentifier","src":"3555:6:35"},"nativeSrc":"3555:39:35","nodeType":"YulFunctionCall","src":"3555:39:35"},"nativeSrc":"3555:39:35","nodeType":"YulExpressionStatement","src":"3555:39:35"},{"expression":{"arguments":[{"arguments":[{"name":"ptr","nativeSrc":"3618:3:35","nodeType":"YulIdentifier","src":"3618:3:35"},{"kind":"number","nativeSrc":"3623:4:35","nodeType":"YulLiteral","src":"3623:4:35","type":"","value":"0x22"}],"functionName":{"name":"add","nativeSrc":"3614:3:35","nodeType":"YulIdentifier","src":"3614:3:35"},"nativeSrc":"3614:14:35","nodeType":"YulFunctionCall","src":"3614:14:35"},{"name":"structHash","nativeSrc":"3630:10:35","nodeType":"YulIdentifier","src":"3630:10:35"}],"functionName":{"name":"mstore","nativeSrc":"3607:6:35","nodeType":"YulIdentifier","src":"3607:6:35"},"nativeSrc":"3607:34:35","nodeType":"YulFunctionCall","src":"3607:34:35"},"nativeSrc":"3607:34:35","nodeType":"YulExpressionStatement","src":"3607:34:35"},{"nativeSrc":"3654:30:35","nodeType":"YulAssignment","src":"3654:30:35","value":{"arguments":[{"name":"ptr","nativeSrc":"3674:3:35","nodeType":"YulIdentifier","src":"3674:3:35"},{"kind":"number","nativeSrc":"3679:4:35","nodeType":"YulLiteral","src":"3679:4:35","type":"","value":"0x42"}],"functionName":{"name":"keccak256","nativeSrc":"3664:9:35","nodeType":"YulIdentifier","src":"3664:9:35"},"nativeSrc":"3664:20:35","nodeType":"YulFunctionCall","src":"3664:20:35"},"variableNames":[{"name":"digest","nativeSrc":"3654:6:35","nodeType":"YulIdentifier","src":"3654:6:35"}]}]},"evmVersion":"cancun","externalReferences":[{"declaration":44028,"isOffset":false,"isSlot":false,"src":"3654:6:35","valueSize":1},{"declaration":44023,"isOffset":false,"isSlot":false,"src":"3578:15:35","valueSize":1},{"declaration":44025,"isOffset":false,"isSlot":false,"src":"3630:10:35","valueSize":1}],"flags":["memory-safe"],"id":44030,"nodeType":"InlineAssembly","src":"3445:249:35"}]},"documentation":{"id":44021,"nodeType":"StructuredDocumentation","src":"2890:431:35","text":" @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\n The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\n `\\x19\\x01` and hashing the result. It corresponds to the hash signed by the\n https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\n See {ECDSA-recover}."},"implemented":true,"kind":"function","modifiers":[],"name":"toTypedDataHash","nameLocation":"3335:15:35","parameters":{"id":44026,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44023,"mutability":"mutable","name":"domainSeparator","nameLocation":"3359:15:35","nodeType":"VariableDeclaration","scope":44032,"src":"3351:23:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44022,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3351:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"},{"constant":false,"id":44025,"mutability":"mutable","name":"structHash","nameLocation":"3384:10:35","nodeType":"VariableDeclaration","scope":44032,"src":"3376:18:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44024,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3376:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3350:45:35"},"returnParameters":{"id":44029,"nodeType":"ParameterList","parameters":[{"constant":false,"id":44028,"mutability":"mutable","name":"digest","nameLocation":"3427:6:35","nodeType":"VariableDeclaration","scope":44032,"src":"3419:14:35","stateVariable":false,"storageLocation":"default","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"},"typeName":{"id":44027,"name":"bytes32","nodeType":"ElementaryTypeName","src":"3419:7:35","typeDescriptions":{"typeIdentifier":"t_bytes32","typeString":"bytes32"}},"visibility":"internal"}],"src":"3418:16:35"},"scope":44033,"stateMutability":"pure","virtual":false,"visibility":"internal"}],"abstract":false,"baseContracts":[],"canonicalName":"MessageHashUtils","contractDependencies":[],"contractKind":"library","documentation":{"id":43964,"nodeType":"StructuredDocumentation","src":"190:330:35","text":" @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\n The library provides methods for generating a hash of a message that conforms to the\n https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\n specifications."},"fullyImplemented":true,"linearizedBaseContracts":[44033],"name":"MessageHashUtils","nameLocation":"529:16:35","scope":44034,"usedErrors":[],"usedEvents":[]}],"license":"MIT"},"id":35}